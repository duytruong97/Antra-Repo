02 Arrays and Strings 

Test your Knowledge 

1)

If the string remains unchanged, use the String class object because it's immutable, while if the string needs to be changed, StringBuilder is used 

2)

Array class is the base class for all the arrays in C#

3)

There all many algorithms to sort an arrays. Those are Selection Sort, Bubble Sort, MErge Sort, Radix Sort, Insertion Sort, and more 

4)

I can use the .Length() function/property to return the legnth of the array

5)

Yes you can, if the data type is defined as object

6)

Clone() makes a dublicate from the original array, while CopyTo() copies all the elements from the original array and paste it to another array at a given index


Practice Arrays


1)

int[] newArr = new int[10] {1,5,2,3,4,5,7,3,9,2};

int[] newArr2 = new int[newArr.Length];

for(int i = 0; i < newArr.Length; i++)
{
    newArr2[i] = newArr[i];
    Console.WriteLine(newArr[i]);
    Console.WriteLine(newArr2[i]);
}


2)

static void tobuy(){
	ArrayList arlist = new ArrayList();

	for (; ; )
	{
	   
	    Console.WriteLine("Enter command (+ item, - item, or -- to clear)):");
	    String input = Console.ReadLine();
	    if (input.Length == 1 && input[0] == '-')
	    {
	        arlist.Clear();
	        foreach (string item in arlist)
	        {
	            Console.WriteLine(item);
	        }
	    }
	    else if (input[0] == '+')
	    {
	        arlist.Add(input.Substring(2));
	        foreach (string item in arlist)
	        {
	            Console.WriteLine(item);
	        }

	    }
	    else if (input[0] == '-')
	    {
	        arlist.Remove(input.Substring(2));
	        foreach (string item in arlist)
	        {
	            Console.WriteLine(item);
	        }
	    }

	}

}



3)

int[] primes = FindPrimesInRange(1, 100);



static int[] FindPrimesInRange(int startNum, int endNum)
    {
    List<int> primeList = new List<int>();  
    for(int i = startNum; i < endNum+1; i++){
        int count = 0;
        for(int j = startNum; j<= i; j++){
            if (i%j == 0)
            {
                count++;
            }
        }
        if(count == 2)
        {
            primeList.Add(i);
        }
    }
    int [] primes = primeList.ToArray();
    for(int k = 0; k < primes.Length; k++)
    {
        Console.Write(primes[k] + " ");
    }
    return primes;
}


4)

rotateArr("1 2 4 -5 7", 2);




static void rotateArr(String s, int k)
{
    int[] ints = Array.ConvertAll(s.Split(' '), int.Parse);
    k = k%s.Length;
    reverse(ints, 0, ints.Length-1);
    reverse(ints, 0, k - 1);
    reverse(ints, k, ints.Length-1);
    for(int i = 0; i < ints.Length; i++)
    {
        Console.WriteLine(ints[i]);
    }

}

static void reverse(int[] nums, int start, int end)
{
    while(start < end)
    {
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
        start++;
        end--;
    }
}




5)

static int[] findSeq(int[] arr)
{
    int CountS = 0;
    for (int i = 0; i < arr.Length; i++)
    {
        for (int j = 1; j < arr.Length; j++)
        {

        }
    }
}


6)


Practice Strings

1)


static void reverseString1(String s)
{
    Char[] charArr = s.ToCharArray();
    int i = 0;
    int j = charArr.Length-1;
    while (i < j)
    {
        Char temp = charArr[i];
        charArr[i] = charArr[j];
        charArr[j] = temp;
        i++;
        j--;
    }
    foreach (char ch in charArr)
    {
        Console.Write(ch);
    }

}



static void reverseString2(String s)
{
    for(int i = s.Length-1; i >= 0; i--)
    {
        Console.Write(s[i]);
    }
}



2)

